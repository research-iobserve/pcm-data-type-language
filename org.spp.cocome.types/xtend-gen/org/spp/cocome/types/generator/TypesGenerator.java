/**
 * generated by Xtext
 */
package org.spp.cocome.types.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterators;
import java.io.File;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import org.spp.cocome.types.types.BooleanLiteral;
import org.spp.cocome.types.types.CharLiteral;
import org.spp.cocome.types.types.CollectionType;
import org.spp.cocome.types.types.ComplexType;
import org.spp.cocome.types.types.DeclarationTypeReference;
import org.spp.cocome.types.types.EntityRelationship;
import org.spp.cocome.types.types.EntityRelationshipKind;
import org.spp.cocome.types.types.EntityType;
import org.spp.cocome.types.types.EnumerationType;
import org.spp.cocome.types.types.Import;
import org.spp.cocome.types.types.Literal;
import org.spp.cocome.types.types.MapType;
import org.spp.cocome.types.types.MappedByReference;
import org.spp.cocome.types.types.Model;
import org.spp.cocome.types.types.NamedType;
import org.spp.cocome.types.types.NumberLiteral;
import org.spp.cocome.types.types.PrimitiveType;
import org.spp.cocome.types.types.Property;
import org.spp.cocome.types.types.PropertyReference;
import org.spp.cocome.types.types.PropertyStorageModifier;
import org.spp.cocome.types.types.StringLiteral;
import org.spp.cocome.types.types.TypeReference;
import org.spp.cocome.types.types.TypeStorageModifier;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class TypesGenerator implements IGenerator {
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterator<EntityType> _filter = Iterators.<EntityType>filter(_allContents, EntityType.class);
    final Procedure1<EntityType> _function = new Procedure1<EntityType>() {
      public void apply(final EntityType e) {
        String _createFileName = TypesGenerator.this.createFileName(e);
        CharSequence _createEntity = TypesGenerator.this.createEntity(e);
        fsa.generateFile(_createFileName, _createEntity);
      }
    };
    IteratorExtensions.<EntityType>forEach(_filter, _function);
  }
  
  public String createFileName(final EntityType type) {
    EObject _eContainer = type.eContainer();
    String _name = ((Model) _eContainer).getName();
    String _replace = _name.replace(".", File.separator);
    String _plus = (_replace + File.separator);
    String _name_1 = type.getName();
    String _plus_1 = (_plus + _name_1);
    return (_plus_1 + ".java");
  }
  
  public CharSequence createEntity(final EntityType type) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    EObject _eContainer = type.eContainer();
    String _name = ((Model) _eContainer).getName();
    _builder.append(_name, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import java.sql.Date;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    TypeStorageModifier _storageModifier = type.getStorageModifier();
    String _createImports = this.createImports(_storageModifier);
    _builder.append(_createImports, "");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    EObject _eContainer_1 = type.eContainer();
    EList<Import> _imports = ((Model) _eContainer_1).getImports();
    final Function1<Import, CharSequence> _function = new Function1<Import, CharSequence>() {
      public CharSequence apply(final Import i) {
        return TypesGenerator.this.createImport(i);
      }
    };
    List<CharSequence> _map = ListExtensions.<Import, CharSequence>map(_imports, _function);
    String _join = IterableExtensions.join(_map);
    _builder.append(_join, "");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    TypeStorageModifier _storageModifier_1 = type.getStorageModifier();
    String _createClassAnnotation = this.createClassAnnotation(_storageModifier_1);
    _builder.append(_createClassAnnotation, "");
    _builder.newLineIfNotEmpty();
    _builder.append("public class ");
    String _name_1 = type.getName();
    _builder.append(_name_1, "");
    _builder.append(" ");
    String _xifexpression = null;
    ComplexType _parent = type.getParent();
    boolean _notEquals = (!Objects.equal(_parent, null));
    if (_notEquals) {
      ComplexType _parent_1 = type.getParent();
      String _name_2 = _parent_1.getName();
      _xifexpression = ("extends " + _name_2);
    }
    _builder.append(_xifexpression, "");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    EList<Property> _properties = type.getProperties();
    final Function1<Property, CharSequence> _function_1 = new Function1<Property, CharSequence>() {
      public CharSequence apply(final Property p) {
        TypeStorageModifier _storageModifier = type.getStorageModifier();
        return TypesGenerator.this.createProperty(p, _storageModifier);
      }
    };
    List<CharSequence> _map_1 = ListExtensions.<Property, CharSequence>map(_properties, _function_1);
    String _join_1 = IterableExtensions.join(_map_1);
    _builder.append(_join_1, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    EList<Property> _properties_1 = type.getProperties();
    final Function1<Property, CharSequence> _function_2 = new Function1<Property, CharSequence>() {
      public CharSequence apply(final Property p) {
        return TypesGenerator.this.createGettersAndSetters(p);
      }
    };
    List<CharSequence> _map_2 = ListExtensions.<Property, CharSequence>map(_properties_1, _function_2);
    String _join_2 = IterableExtensions.join(_map_2);
    _builder.append(_join_2, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  /**
   * Create the correct annotation for an entity class.
   */
  public String createClassAnnotation(final TypeStorageModifier modifier) {
    String _switchResult = null;
    if (modifier != null) {
      switch (modifier) {
        case STORABLE:
          _switchResult = "@Entity";
          break;
        case EMBEDDABLE:
          _switchResult = "@Embeddable";
          break;
        default:
          break;
      }
    }
    return _switchResult;
  }
  
  /**
   * Create imports related to storage modifiers.
   */
  public String createImports(final TypeStorageModifier modifier) {
    String _switchResult = null;
    if (modifier != null) {
      switch (modifier) {
        case STORABLE:
          _switchResult = "import javax.persistence.Entity;";
          break;
        case EMBEDDABLE:
          _switchResult = "import javax.persistence.Embeddable;";
          break;
        default:
          break;
      }
    }
    return _switchResult;
  }
  
  public CharSequence createGettersAndSetters(final Property property) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public ");
    DeclarationTypeReference _type = property.getType();
    CharSequence _createJavaType = this.createJavaType(_type);
    _builder.append(_createJavaType, "");
    _builder.append(" get");
    String _name = property.getName();
    String _firstUpper = StringExtensions.toFirstUpper(_name);
    _builder.append(_firstUpper, "");
    _builder.append("() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("return this.");
    String _name_1 = property.getName();
    _builder.append(_name_1, "\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public void set");
    String _name_2 = property.getName();
    String _firstUpper_1 = StringExtensions.toFirstUpper(_name_2);
    _builder.append(_firstUpper_1, "");
    _builder.append("(final ");
    DeclarationTypeReference _type_1 = property.getType();
    CharSequence _createJavaType_1 = this.createJavaType(_type_1);
    _builder.append(_createJavaType_1, "");
    _builder.append(" ");
    String _name_3 = property.getName();
    _builder.append(_name_3, "");
    _builder.append(") {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("this.");
    String _name_4 = property.getName();
    _builder.append(_name_4, "\t");
    _builder.append(" = ");
    String _name_5 = property.getName();
    _builder.append(_name_5, "\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence createProperty(final Property property, final TypeStorageModifier modifier) {
    boolean _or = false;
    boolean _equals = Objects.equal(modifier, TypeStorageModifier.STORABLE);
    if (_equals) {
      _or = true;
    } else {
      boolean _equals_1 = Objects.equal(modifier, TypeStorageModifier.EMBEDDABLE);
      _or = _equals_1;
    }
    if (_or) {
      PropertyStorageModifier _storageModifier = property.getStorageModifier();
      if (_storageModifier != null) {
        switch (_storageModifier) {
          case TRANSIENT:
            return this.createTransientProperty(property);
          case VALUE:
            return this.createTransientProperty(property);
          case VARIABLE:
            return this.createStorableProperty(property);
          default:
            break;
        }
      }
    } else {
      return this.createNormalProperty(property);
    }
    return null;
  }
  
  public CharSequence createNormalProperty(final Property property) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("private ");
    String _xifexpression = null;
    PropertyStorageModifier _storageModifier = property.getStorageModifier();
    boolean _equals = Objects.equal(_storageModifier, PropertyStorageModifier.VALUE);
    if (_equals) {
      _xifexpression = "final ";
    }
    _builder.append(_xifexpression, "");
    DeclarationTypeReference _type = property.getType();
    CharSequence _createJavaType = this.createJavaType(_type);
    _builder.append(_createJavaType, "");
    _builder.append(" ");
    String _name = property.getName();
    _builder.append(_name, "");
    String _xifexpression_1 = null;
    Literal _literal = property.getLiteral();
    boolean _notEquals = (!Objects.equal(_literal, null));
    if (_notEquals) {
      Literal _literal_1 = property.getLiteral();
      _xifexpression_1 = this.createLiteral(_literal_1);
    }
    _builder.append(_xifexpression_1, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence createTransientProperty(final Property property) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("private @Transient ");
    String _xifexpression = null;
    PropertyStorageModifier _storageModifier = property.getStorageModifier();
    boolean _equals = Objects.equal(_storageModifier, PropertyStorageModifier.VALUE);
    if (_equals) {
      _xifexpression = "final ";
    }
    _builder.append(_xifexpression, "");
    DeclarationTypeReference _type = property.getType();
    CharSequence _createJavaType = this.createJavaType(_type);
    _builder.append(_createJavaType, "");
    _builder.append(" ");
    String _name = property.getName();
    _builder.append(_name, "");
    String _xifexpression_1 = null;
    Literal _literal = property.getLiteral();
    boolean _notEquals = (!Objects.equal(_literal, null));
    if (_notEquals) {
      Literal _literal_1 = property.getLiteral();
      _xifexpression_1 = this.createLiteral(_literal_1);
    }
    _builder.append(_xifexpression_1, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence createStorableProperty(final Property property) {
    CharSequence _xifexpression = null;
    EntityRelationship _relationship = property.getRelationship();
    boolean _equals = Objects.equal(_relationship, null);
    if (_equals) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("private ");
      DeclarationTypeReference _type = property.getType();
      CharSequence _createDatabaseType = this.createDatabaseType(_type);
      _builder.append(_createDatabaseType, "");
      _builder.append(" ");
      String _name = property.getName();
      _builder.append(_name, "");
      _builder.append(";");
      _xifexpression = _builder;
    } else {
      CharSequence _switchResult = null;
      EntityRelationship _relationship_1 = property.getRelationship();
      EntityRelationshipKind _kind = _relationship_1.getKind();
      if (_kind != null) {
        switch (_kind) {
          case UNIQUE:
            CharSequence _switchResult_1 = null;
            DeclarationTypeReference _type_1 = property.getType();
            boolean _matched = false;
            if (!_matched) {
              if (_type_1 instanceof TypeReference) {
                _matched=true;
                StringConcatenation _builder_1 = new StringConcatenation();
                _builder_1.append("@OneToOne(cascade=CascadeType.ALL,");
                EntityRelationship _relationship_2 = property.getRelationship();
                MappedByReference _mappedBy = _relationship_2.getMappedBy();
                CharSequence _createMappedBy = null;
                if (_mappedBy!=null) {
                  _createMappedBy=this.createMappedBy(_mappedBy);
                }
                _builder_1.append(_createMappedBy, "");
                _builder_1.append(")");
                _builder_1.newLineIfNotEmpty();
                _builder_1.append("private ");
                DeclarationTypeReference _type_2 = property.getType();
                CharSequence _createDatabaseType_1 = this.createDatabaseType(_type_2);
                _builder_1.append(_createDatabaseType_1, "");
                _builder_1.append(" ");
                String _name_1 = property.getName();
                _builder_1.append(_name_1, "");
                _builder_1.append(";");
                _switchResult_1 = _builder_1;
              }
            }
            if (!_matched) {
              if (_type_1 instanceof CollectionType) {
                EntityRelationship _relationship_2 = property.getRelationship();
                MappedByReference _mappedBy = _relationship_2.getMappedBy();
                boolean _equals_1 = Objects.equal(_mappedBy, null);
                if (_equals_1) {
                  _matched=true;
                  StringConcatenation _builder_1 = new StringConcatenation();
                  _builder_1.append("@OneToMany");
                  _builder_1.newLine();
                  _builder_1.append("private ");
                  DeclarationTypeReference _type_2 = property.getType();
                  CharSequence _createDatabaseType_1 = this.createDatabaseType(_type_2);
                  _builder_1.append(_createDatabaseType_1, "");
                  _builder_1.append(" ");
                  String _name_1 = property.getName();
                  _builder_1.append(_name_1, "");
                  _builder_1.append(";");
                  _switchResult_1 = _builder_1;
                }
              }
            }
            if (!_matched) {
              if (_type_1 instanceof CollectionType) {
                EntityRelationship _relationship_2 = property.getRelationship();
                MappedByReference _mappedBy = _relationship_2.getMappedBy();
                boolean _notEquals = (!Objects.equal(_mappedBy, null));
                if (_notEquals) {
                  _matched=true;
                  StringConcatenation _builder_1 = new StringConcatenation();
                  _builder_1.append("@OneToMany(");
                  EntityRelationship _relationship_3 = property.getRelationship();
                  MappedByReference _mappedBy_1 = _relationship_3.getMappedBy();
                  CharSequence _createMappedBy = this.createMappedBy(_mappedBy_1);
                  _builder_1.append(_createMappedBy, "");
                  _builder_1.append(")");
                  _builder_1.newLineIfNotEmpty();
                  _builder_1.append("private ");
                  DeclarationTypeReference _type_2 = property.getType();
                  CharSequence _createDatabaseType_1 = this.createDatabaseType(_type_2);
                  _builder_1.append(_createDatabaseType_1, "");
                  _builder_1.append(" ");
                  String _name_1 = property.getName();
                  _builder_1.append(_name_1, "");
                  _builder_1.append(";");
                  _switchResult_1 = _builder_1;
                }
              }
            }
            if (!_matched) {
              if (_type_1 instanceof MapType) {
                EntityRelationship _relationship_2 = property.getRelationship();
                MappedByReference _mappedBy = _relationship_2.getMappedBy();
                boolean _equals_1 = Objects.equal(_mappedBy, null);
                if (_equals_1) {
                  _matched=true;
                  StringConcatenation _builder_1 = new StringConcatenation();
                  _builder_1.append("@OneToMany");
                  _builder_1.newLine();
                  _builder_1.append("@MapKey(name=\"");
                  PropertyReference _mapKey = property.getMapKey();
                  Property _reference = _mapKey.getReference();
                  String _name_1 = _reference.getName();
                  _builder_1.append(_name_1, "");
                  _builder_1.append("\")");
                  _builder_1.newLineIfNotEmpty();
                  _builder_1.append("private ");
                  DeclarationTypeReference _type_2 = property.getType();
                  CharSequence _createDatabaseType_1 = this.createDatabaseType(_type_2);
                  _builder_1.append(_createDatabaseType_1, "");
                  _builder_1.append(" ");
                  String _name_2 = property.getName();
                  _builder_1.append(_name_2, "");
                  _builder_1.append(";");
                  _switchResult_1 = _builder_1;
                }
              }
            }
            if (!_matched) {
              if (_type_1 instanceof MapType) {
                EntityRelationship _relationship_2 = property.getRelationship();
                MappedByReference _mappedBy = _relationship_2.getMappedBy();
                boolean _equals_1 = Objects.equal(_mappedBy, null);
                if (_equals_1) {
                  _matched=true;
                  StringConcatenation _builder_1 = new StringConcatenation();
                  _builder_1.append("@OneToMany(");
                  EntityRelationship _relationship_3 = property.getRelationship();
                  MappedByReference _mappedBy_1 = _relationship_3.getMappedBy();
                  CharSequence _createMappedBy = this.createMappedBy(_mappedBy_1);
                  _builder_1.append(_createMappedBy, "");
                  _builder_1.append(")");
                  _builder_1.newLineIfNotEmpty();
                  _builder_1.append("@MapKey(name=\"");
                  PropertyReference _mapKey = property.getMapKey();
                  Property _reference = _mapKey.getReference();
                  String _name_1 = _reference.getName();
                  _builder_1.append(_name_1, "");
                  _builder_1.append("\")");
                  _builder_1.newLineIfNotEmpty();
                  _builder_1.append("private ");
                  DeclarationTypeReference _type_2 = property.getType();
                  CharSequence _createDatabaseType_1 = this.createDatabaseType(_type_2);
                  _builder_1.append(_createDatabaseType_1, "");
                  _builder_1.append(" ");
                  String _name_2 = property.getName();
                  _builder_1.append(_name_2, "");
                  _builder_1.append(";");
                  _switchResult_1 = _builder_1;
                }
              }
            }
            _switchResult = _switchResult_1;
            break;
          case MANY:
            CharSequence _switchResult_2 = null;
            DeclarationTypeReference _type_2 = property.getType();
            boolean _matched_1 = false;
            if (!_matched_1) {
              if (_type_2 instanceof CollectionType) {
                EntityRelationship _relationship_2 = property.getRelationship();
                MappedByReference _mappedBy = _relationship_2.getMappedBy();
                boolean _notEquals = (!Objects.equal(_mappedBy, null));
                if (_notEquals) {
                  _matched_1=true;
                  StringConcatenation _builder_1 = new StringConcatenation();
                  _builder_1.append("@OneToMany(");
                  EntityRelationship _relationship_3 = property.getRelationship();
                  MappedByReference _mappedBy_1 = _relationship_3.getMappedBy();
                  CharSequence _createMappedBy = this.createMappedBy(_mappedBy_1);
                  _builder_1.append(_createMappedBy, "");
                  _builder_1.append(")");
                  _builder_1.newLineIfNotEmpty();
                  _builder_1.append("private ");
                  DeclarationTypeReference _type_3 = property.getType();
                  CharSequence _createDatabaseType_1 = this.createDatabaseType(_type_3);
                  _builder_1.append(_createDatabaseType_1, "");
                  _builder_1.append(" ");
                  String _name_1 = property.getName();
                  _builder_1.append(_name_1, "");
                  _builder_1.append(";");
                  _switchResult_2 = _builder_1;
                }
              }
            }
            if (!_matched_1) {
              if (_type_2 instanceof CollectionType) {
                EntityRelationship _relationship_2 = property.getRelationship();
                MappedByReference _mappedBy = _relationship_2.getMappedBy();
                boolean _notEquals = (!Objects.equal(_mappedBy, null));
                if (_notEquals) {
                  _matched_1=true;
                  StringConcatenation _builder_1 = new StringConcatenation();
                  _builder_1.append("@ManyToOne(");
                  EntityRelationship _relationship_3 = property.getRelationship();
                  MappedByReference _mappedBy_1 = _relationship_3.getMappedBy();
                  CharSequence _createMappedBy = this.createMappedBy(_mappedBy_1);
                  _builder_1.append(_createMappedBy, "");
                  _builder_1.append(")");
                  _builder_1.newLineIfNotEmpty();
                  _builder_1.append("private ");
                  DeclarationTypeReference _type_3 = property.getType();
                  CharSequence _createDatabaseType_1 = this.createDatabaseType(_type_3);
                  _builder_1.append(_createDatabaseType_1, "");
                  _builder_1.append(" ");
                  String _name_1 = property.getName();
                  _builder_1.append(_name_1, "");
                  _builder_1.append(";");
                  _switchResult_2 = _builder_1;
                }
              }
            }
            if (!_matched_1) {
              if (_type_2 instanceof MapType) {
                EntityRelationship _relationship_2 = property.getRelationship();
                MappedByReference _mappedBy = _relationship_2.getMappedBy();
                boolean _notEquals = (!Objects.equal(_mappedBy, null));
                if (_notEquals) {
                  _matched_1=true;
                  StringConcatenation _builder_1 = new StringConcatenation();
                  _builder_1.append("@ManyToOne(");
                  EntityRelationship _relationship_3 = property.getRelationship();
                  MappedByReference _mappedBy_1 = _relationship_3.getMappedBy();
                  CharSequence _createMappedBy = this.createMappedBy(_mappedBy_1);
                  _builder_1.append(_createMappedBy, "");
                  _builder_1.append(")");
                  _builder_1.newLineIfNotEmpty();
                  _builder_1.append("@MapKey(name=\"");
                  PropertyReference _mapKey = property.getMapKey();
                  Property _reference = _mapKey.getReference();
                  String _name_1 = _reference.getName();
                  _builder_1.append(_name_1, "");
                  _builder_1.append("\")");
                  _builder_1.newLineIfNotEmpty();
                  _builder_1.append("private ");
                  DeclarationTypeReference _type_3 = property.getType();
                  CharSequence _createDatabaseType_1 = this.createDatabaseType(_type_3);
                  _builder_1.append(_createDatabaseType_1, "");
                  _builder_1.append(" ");
                  String _name_2 = property.getName();
                  _builder_1.append(_name_2, "");
                  _builder_1.append(";");
                  _switchResult_2 = _builder_1;
                }
              }
            }
            if (!_matched_1) {
              if (_type_2 instanceof MapType) {
                EntityRelationship _relationship_2 = property.getRelationship();
                MappedByReference _mappedBy = _relationship_2.getMappedBy();
                boolean _notEquals = (!Objects.equal(_mappedBy, null));
                if (_notEquals) {
                  _matched_1=true;
                  StringConcatenation _builder_1 = new StringConcatenation();
                  _builder_1.append("@ManyToOne(");
                  EntityRelationship _relationship_3 = property.getRelationship();
                  MappedByReference _mappedBy_1 = _relationship_3.getMappedBy();
                  CharSequence _createMappedBy = this.createMappedBy(_mappedBy_1);
                  _builder_1.append(_createMappedBy, "");
                  _builder_1.append(")");
                  _builder_1.newLineIfNotEmpty();
                  _builder_1.append("@MapKey(name=\"");
                  PropertyReference _mapKey = property.getMapKey();
                  Property _reference = _mapKey.getReference();
                  String _name_1 = _reference.getName();
                  _builder_1.append(_name_1, "");
                  _builder_1.append("\")");
                  _builder_1.newLineIfNotEmpty();
                  _builder_1.append("private ");
                  DeclarationTypeReference _type_3 = property.getType();
                  CharSequence _createDatabaseType_1 = this.createDatabaseType(_type_3);
                  _builder_1.append(_createDatabaseType_1, "");
                  _builder_1.append(" ");
                  String _name_2 = property.getName();
                  _builder_1.append(_name_2, "");
                  _builder_1.append(";");
                  _switchResult_2 = _builder_1;
                }
              }
            }
            _switchResult = _switchResult_2;
            break;
          default:
            break;
        }
      }
      _xifexpression = _switchResult;
    }
    return _xifexpression;
  }
  
  /**
   * Recursively create a path for the property mapped by reference.
   */
  public CharSequence createMappedBy(final MappedByReference reference) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("mappedBy=\"");
    Property _base = reference.getBase();
    String _name = _base.getName();
    _builder.append(_name, "");
    MappedByReference _path = reference.getPath();
    CharSequence _createMappedByPath = null;
    if (_path!=null) {
      _createMappedByPath=this.createMappedByPath(_path);
    }
    _builder.append(_createMappedByPath, "");
    _builder.append("\"");
    return _builder;
  }
  
  public CharSequence createMappedByPath(final MappedByReference reference) {
    StringConcatenation _builder = new StringConcatenation();
    Property _base = reference.getBase();
    String _name = _base.getName();
    _builder.append(_name, "");
    MappedByReference _path = reference.getPath();
    CharSequence _createMappedByPath = null;
    if (_path!=null) {
      _createMappedByPath=this.createMappedByPath(_path);
    }
    _builder.append(_createMappedByPath, "");
    return _builder;
  }
  
  /**
   * '''
   * @OneToOne(cascade=CascadeType.ALL) unique
   * @ManyToOne indicates that instances of the class can share the same reference to another object (reference)
   * 
   * @OneToMany(mappedBy="property of the above mentioned class which shares the reference")
   * implementes a bi-directional mapping
   * 
   * @OrderBy("name") allows to order objects by one of its fields described in a @OneToMany mapping.
   * @MapKey(name="name") maps the given property of the referenced class to a key value in a map.
   * Therefore is only applicable for map types, which are not yet supported.
   * 
   * «if (property.containment && property.type instanceof CollectionType && (property.eContainer as EntityType).storageModifier == TypeStorageModifier::STORABLE) '@OneToMany'»
   * private «property.type.createDatabaseType» «property.name»;
   * '''
   */
  public String createLiteral(final Literal literal) {
    boolean _matched = false;
    if (!_matched) {
      if (literal instanceof PropertyReference) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("null");
        return _builder.toString();
      }
    }
    if (!_matched) {
      if (literal instanceof StringLiteral) {
        _matched=true;
        return ((StringLiteral)literal).getValue();
      }
    }
    if (!_matched) {
      if (literal instanceof CharLiteral) {
        _matched=true;
        String _value = ((CharLiteral)literal).getValue();
        String _plus = ("\'" + _value);
        return (_plus + "\'");
      }
    }
    if (!_matched) {
      if (literal instanceof NumberLiteral) {
        _matched=true;
        return ((NumberLiteral)literal).getValue();
      }
    }
    if (!_matched) {
      if (literal instanceof BooleanLiteral) {
        _matched=true;
        String _xifexpression = null;
        boolean _isValue = ((BooleanLiteral)literal).isValue();
        if (_isValue) {
          _xifexpression = "true";
        } else {
          _xifexpression = "false";
        }
        return _xifexpression;
      }
    }
    return null;
  }
  
  protected CharSequence _createJavaType(final TypeReference reference) {
    String _switchResult = null;
    NamedType _reference = reference.getReference();
    boolean _matched = false;
    if (!_matched) {
      if (_reference instanceof PrimitiveType) {
        NamedType _reference_1 = reference.getReference();
        String _name = _reference_1.getName();
        boolean _equals = _name.equals("string");
        if (_equals) {
          _matched=true;
          _switchResult = "String";
        }
      }
    }
    if (!_matched) {
      if (_reference instanceof PrimitiveType) {
        NamedType _reference_1 = reference.getReference();
        String _name = _reference_1.getName();
        boolean _equals = _name.equals("currency");
        if (_equals) {
          _matched=true;
          _switchResult = "double";
        }
      }
    }
    if (!_matched) {
      if (_reference instanceof PrimitiveType) {
        NamedType _reference_1 = reference.getReference();
        String _name = _reference_1.getName();
        boolean _equals = _name.equals("date");
        if (_equals) {
          _matched=true;
          _switchResult = "Date";
        }
      }
    }
    if (!_matched) {
      if (_reference instanceof PrimitiveType) {
        _matched=true;
        NamedType _reference_1 = reference.getReference();
        _switchResult = _reference_1.getName();
      }
    }
    if (!_matched) {
      NamedType _reference_1 = reference.getReference();
      _switchResult = _reference_1.getName();
    }
    return _switchResult;
  }
  
  protected CharSequence _createJavaType(final CollectionType reference) {
    CharSequence _xifexpression = null;
    int _size = reference.getSize();
    boolean _notEquals = (_size != 0);
    if (_notEquals) {
      StringConcatenation _builder = new StringConcatenation();
      TypeReference _reference = reference.getReference();
      CharSequence _createJavaType = this.createJavaType(_reference);
      _builder.append(_createJavaType, "");
      _builder.append("[");
      int _size_1 = reference.getSize();
      _builder.append(_size_1, "");
      _builder.append("]");
      _xifexpression = _builder;
    } else {
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("List<");
      TypeReference _reference_1 = reference.getReference();
      CharSequence _createJavaType_1 = this.createJavaType(_reference_1);
      _builder_1.append(_createJavaType_1, "");
      _builder_1.append(">");
      _xifexpression = _builder_1;
    }
    return _xifexpression;
  }
  
  protected CharSequence _createDatabaseType(final TypeReference reference) {
    CharSequence _switchResult = null;
    NamedType _reference = reference.getReference();
    boolean _matched = false;
    if (!_matched) {
      if (_reference instanceof PrimitiveType) {
        NamedType _reference_1 = reference.getReference();
        String _name = _reference_1.getName();
        boolean _equals = _name.equals("string");
        if (_equals) {
          _matched=true;
          _switchResult = "String";
        }
      }
    }
    if (!_matched) {
      if (_reference instanceof PrimitiveType) {
        NamedType _reference_1 = reference.getReference();
        String _name = _reference_1.getName();
        boolean _equals = _name.equals("currency");
        if (_equals) {
          _matched=true;
          _switchResult = "double";
        }
      }
    }
    if (!_matched) {
      if (_reference instanceof PrimitiveType) {
        NamedType _reference_1 = reference.getReference();
        String _name = _reference_1.getName();
        boolean _equals = _name.equals("date");
        if (_equals) {
          _matched=true;
          _switchResult = "@Temporal(TemporalType.TIMESTAMP) Date";
        }
      }
    }
    if (!_matched) {
      if (_reference instanceof PrimitiveType) {
        _matched=true;
        NamedType _reference_1 = reference.getReference();
        _switchResult = _reference_1.getName();
      }
    }
    if (!_matched) {
      if (_reference instanceof EnumerationType) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("@Enumerated(EnumType.ORDINAL) ");
        NamedType _reference_1 = reference.getReference();
        String _name = _reference_1.getName();
        _builder.append(_name, "");
        _switchResult = _builder;
      }
    }
    if (!_matched) {
      NamedType _reference_1 = reference.getReference();
      _switchResult = _reference_1.getName();
    }
    return _switchResult;
  }
  
  protected CharSequence _createDatabaseType(final CollectionType reference) {
    CharSequence _xifexpression = null;
    int _size = reference.getSize();
    boolean _notEquals = (_size != 0);
    if (_notEquals) {
      StringConcatenation _builder = new StringConcatenation();
      TypeReference _reference = reference.getReference();
      CharSequence __createJavaType = this._createJavaType(_reference);
      _builder.append(__createJavaType, "");
      _builder.append("[");
      int _size_1 = reference.getSize();
      _builder.append(_size_1, "");
      _builder.append("]");
      _xifexpression = _builder;
    } else {
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("List<");
      TypeReference _reference_1 = reference.getReference();
      CharSequence __createJavaType_1 = this._createJavaType(_reference_1);
      _builder_1.append(__createJavaType_1, "");
      _builder_1.append(">");
      _xifexpression = _builder_1;
    }
    return _xifexpression;
  }
  
  public CharSequence createImport(final Import imp) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import ");
    String _importedNamespace = imp.getImportedNamespace();
    _builder.append(_importedNamespace, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence createJavaType(final DeclarationTypeReference reference) {
    if (reference instanceof CollectionType) {
      return _createJavaType((CollectionType)reference);
    } else if (reference instanceof TypeReference) {
      return _createJavaType((TypeReference)reference);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(reference).toString());
    }
  }
  
  public CharSequence createDatabaseType(final DeclarationTypeReference reference) {
    if (reference instanceof CollectionType) {
      return _createDatabaseType((CollectionType)reference);
    } else if (reference instanceof TypeReference) {
      return _createDatabaseType((TypeReference)reference);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(reference).toString());
    }
  }
}
