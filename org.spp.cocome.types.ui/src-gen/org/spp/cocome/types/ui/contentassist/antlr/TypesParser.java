/*
* generated by Xtext
*/
package org.spp.cocome.types.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.spp.cocome.types.services.TypesGrammarAccess;

public class TypesParser extends AbstractContentAssistParser {
	
	@Inject
	private TypesGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.spp.cocome.types.ui.contentassist.antlr.internal.InternalTypesParser createParser() {
		org.spp.cocome.types.ui.contentassist.antlr.internal.InternalTypesParser result = new org.spp.cocome.types.ui.contentassist.antlr.internal.InternalTypesParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getNamedTypeAccess().getAlternatives(), "rule__NamedType__Alternatives");
					put(grammarAccess.getDeclarationTypeReferenceAccess().getAlternatives(), "rule__DeclarationTypeReference__Alternatives");
					put(grammarAccess.getComplexTypeAccess().getAlternatives(), "rule__ComplexType__Alternatives");
					put(grammarAccess.getLiteralAccess().getAlternatives(), "rule__Literal__Alternatives");
					put(grammarAccess.getBOOLEANAccess().getAlternatives(), "rule__BOOLEAN__Alternatives");
					put(grammarAccess.getNUMBERAccess().getAlternatives(), "rule__NUMBER__Alternatives");
					put(grammarAccess.getNUMBERAccess().getAlternatives_0_0(), "rule__NUMBER__Alternatives_0_0");
					put(grammarAccess.getTypeStorageModifierAccess().getAlternatives(), "rule__TypeStorageModifier__Alternatives");
					put(grammarAccess.getEntityRelationshipKindAccess().getAlternatives(), "rule__EntityRelationshipKind__Alternatives");
					put(grammarAccess.getPropertyStorageModifierAccess().getAlternatives(), "rule__PropertyStorageModifier__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getCollectionTypeAccess().getGroup(), "rule__CollectionType__Group__0");
					put(grammarAccess.getMapTypeAccess().getGroup(), "rule__MapType__Group__0");
					put(grammarAccess.getMapTypeAccess().getGroup_2(), "rule__MapType__Group_2__0");
					put(grammarAccess.getEnumerationTypeAccess().getGroup(), "rule__EnumerationType__Group__0");
					put(grammarAccess.getEnumerationTypeAccess().getGroup_2(), "rule__EnumerationType__Group_2__0");
					put(grammarAccess.getEnumerationTypeAccess().getGroup_5(), "rule__EnumerationType__Group_5__0");
					put(grammarAccess.getEntityTypeAccess().getGroup(), "rule__EntityType__Group__0");
					put(grammarAccess.getEntityTypeAccess().getGroup_3(), "rule__EntityType__Group_3__0");
					put(grammarAccess.getPropertyAccess().getGroup(), "rule__Property__Group__0");
					put(grammarAccess.getPropertyAccess().getGroup_4(), "rule__Property__Group_4__0");
					put(grammarAccess.getPropertyAccess().getGroup_5(), "rule__Property__Group_5__0");
					put(grammarAccess.getPropertyAccess().getGroup_6(), "rule__Property__Group_6__0");
					put(grammarAccess.getEntityRelationshipAccess().getGroup(), "rule__EntityRelationship__Group__0");
					put(grammarAccess.getMappedByReferenceAccess().getGroup(), "rule__MappedByReference__Group__0");
					put(grammarAccess.getMappedByReferenceAccess().getGroup_1(), "rule__MappedByReference__Group_1__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup(), "rule__QualifiedNameWithWildcard__Group__0");
					put(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup_1(), "rule__QualifiedNameWithWildcard__Group_1__0");
					put(grammarAccess.getNUMBERAccess().getGroup_0(), "rule__NUMBER__Group_0__0");
					put(grammarAccess.getNUMBERAccess().getGroup_1(), "rule__NUMBER__Group_1__0");
					put(grammarAccess.getModelAccess().getNameAssignment_1(), "rule__Model__NameAssignment_1");
					put(grammarAccess.getModelAccess().getImportsAssignment_2(), "rule__Model__ImportsAssignment_2");
					put(grammarAccess.getModelAccess().getTypesAssignment_3(), "rule__Model__TypesAssignment_3");
					put(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1(), "rule__Import__ImportedNamespaceAssignment_1");
					put(grammarAccess.getCollectionTypeAccess().getReferenceAssignment_0(), "rule__CollectionType__ReferenceAssignment_0");
					put(grammarAccess.getCollectionTypeAccess().getSizeAssignment_2(), "rule__CollectionType__SizeAssignment_2");
					put(grammarAccess.getMapTypeAccess().getReferenceAssignment_0(), "rule__MapType__ReferenceAssignment_0");
					put(grammarAccess.getMapTypeAccess().getMapTypeAssignment_2_0(), "rule__MapType__MapTypeAssignment_2_0");
					put(grammarAccess.getMapTypeAccess().getSizeAssignment_4(), "rule__MapType__SizeAssignment_4");
					put(grammarAccess.getTypeReferenceAccess().getReferenceAssignment(), "rule__TypeReference__ReferenceAssignment");
					put(grammarAccess.getPrimitiveTypeAccess().getNameAssignment(), "rule__PrimitiveType__NameAssignment");
					put(grammarAccess.getEnumerationTypeAccess().getNameAssignment_1(), "rule__EnumerationType__NameAssignment_1");
					put(grammarAccess.getEnumerationTypeAccess().getParentAssignment_2_1(), "rule__EnumerationType__ParentAssignment_2_1");
					put(grammarAccess.getEnumerationTypeAccess().getLiteralsAssignment_4(), "rule__EnumerationType__LiteralsAssignment_4");
					put(grammarAccess.getEnumerationTypeAccess().getLiteralsAssignment_5_1(), "rule__EnumerationType__LiteralsAssignment_5_1");
					put(grammarAccess.getEnumerationLiteralAccess().getNameAssignment(), "rule__EnumerationLiteral__NameAssignment");
					put(grammarAccess.getEntityTypeAccess().getStorageModifierAssignment_1(), "rule__EntityType__StorageModifierAssignment_1");
					put(grammarAccess.getEntityTypeAccess().getNameAssignment_2(), "rule__EntityType__NameAssignment_2");
					put(grammarAccess.getEntityTypeAccess().getParentAssignment_3_1(), "rule__EntityType__ParentAssignment_3_1");
					put(grammarAccess.getEntityTypeAccess().getPropertiesAssignment_5(), "rule__EntityType__PropertiesAssignment_5");
					put(grammarAccess.getPropertyAccess().getStorageModifierAssignment_0(), "rule__Property__StorageModifierAssignment_0");
					put(grammarAccess.getPropertyAccess().getTypeAssignment_1(), "rule__Property__TypeAssignment_1");
					put(grammarAccess.getPropertyAccess().getNameAssignment_2(), "rule__Property__NameAssignment_2");
					put(grammarAccess.getPropertyAccess().getRelationshipAssignment_3(), "rule__Property__RelationshipAssignment_3");
					put(grammarAccess.getPropertyAccess().getOrderByAssignment_4_1(), "rule__Property__OrderByAssignment_4_1");
					put(grammarAccess.getPropertyAccess().getMapKeyAssignment_5_1(), "rule__Property__MapKeyAssignment_5_1");
					put(grammarAccess.getPropertyAccess().getLiteralAssignment_6_1(), "rule__Property__LiteralAssignment_6_1");
					put(grammarAccess.getEntityRelationshipAccess().getKindAssignment_1(), "rule__EntityRelationship__KindAssignment_1");
					put(grammarAccess.getEntityRelationshipAccess().getMappedByAssignment_2(), "rule__EntityRelationship__MappedByAssignment_2");
					put(grammarAccess.getMappedByReferenceAccess().getBaseAssignment_0(), "rule__MappedByReference__BaseAssignment_0");
					put(grammarAccess.getMappedByReferenceAccess().getPathAssignment_1_1(), "rule__MappedByReference__PathAssignment_1_1");
					put(grammarAccess.getStringLiteralAccess().getValueAssignment(), "rule__StringLiteral__ValueAssignment");
					put(grammarAccess.getCharLiteralAccess().getValueAssignment(), "rule__CharLiteral__ValueAssignment");
					put(grammarAccess.getNumberLiteralAccess().getValueAssignment(), "rule__NumberLiteral__ValueAssignment");
					put(grammarAccess.getBooleanLiteralAccess().getValueAssignment(), "rule__BooleanLiteral__ValueAssignment");
					put(grammarAccess.getPropertyReferenceAccess().getReferenceAssignment(), "rule__PropertyReference__ReferenceAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.spp.cocome.types.ui.contentassist.antlr.internal.InternalTypesParser typedParser = (org.spp.cocome.types.ui.contentassist.antlr.internal.InternalTypesParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public TypesGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(TypesGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
